const mongoose = require('mongoose');
const Store = mongoose.model('Store'); // Referencing Store mongoose model that's being exported in ../models/Store.js
const multer = require('multer'); // Used for image uploads
const jimp = require('jimp'); // Used for image resizing
const uuid = require('uuid') // Provides unique identifiers for all images - prevents us from overwriting images accidentially

const multerOptions = {
  storage: multer.memoryStorage(), // States where we're going to store the images
  fileFilter(req, file, next) {
    const isPhoto = file.mimetype.startsWith('image/');
    if (isPhoto) {
      next(null, true);
    } else {
      next({message: 'That file type is not allowed.'}, false);
    }
  }
};

exports.homePage = (req, res) => {
  res.render('index');
}

exports.addStore = (req, res) => {
  res.render('editStore', {
    title: 'Add Store'
  });
}

// Apply multer with multerOptions to single form field named 'photo'
exports.upload = multer(multerOptions).single('photo'); // Stores file in memory - doesn't actually save the image

exports.resize = async(req, res, next) => {
  // check if there is no new file to resize
  if (!req.file) {
    next(); // skip to next middleware
    return;
  }
  const extension = req.file.mimetype.split('/')[1]; // get the image extension
  req.body.photo = `${uuid.v4()}.${extension}`; // Assign unique identifier to the photo

  // Now we resize
  const photo = await jimp.read(req.file.buffer) // can pass either filetype or buffer
  await photo.resize(800, jimp.AUTO); // resize photo
  await photo.write(`./public/uploads/${req.body.photo}`); // write photo to filesystem

  // Once we have written our photo to our filesystem, keep going
  next();

}

exports.createStore = async (req, res) => {
  const store = await (new Store(req.body)).save(); // Immediately save store and await it. This will give us access to the autogenerated slug value for the redirect
  req.flash('success', `Successfully Created ${store.name}. Care to leave a review`); // makes use of flash middleware
  res.redirect(`/store/${store.slug}`);
}

exports.getStores = async(req, res) => {
  // 1. Query the database for a list of all stores
  const stores = await Store.find(); // Returns promise
  res.render('stores', { title: 'Stores', stores }); // pass the data to the template
}

exports.editStore = async(req, res) => {
    // 1. Find the store given the id
  const store = await Store.findOne({ _id: req.params.id });

  // 2. Confirm they are the owner of the store
  // 3. Render out the edit form so that the user can update their store
  res.render('editStore', { title: `Edit ${store.name}`, store})
}

exports.updateStore = async(req, res) => {
  // set the location data to be a point
  req.body.location.type = 'Point';

  // 1. Find and update the store
  const store = await Store.findOneAndUpdate({ _id: req.params.id }, req.body, {
    new: true, // return the new store instead of the old one
    runValidators: true // forces model to run required validators
  }).exec(); // exec forces the query to run

  // 2. Redirect them to the store and tell them it worked
  req.flash('success', `Sucessfully updated ${store.name}. <a href="/stores/${store.slug}">View Store</a>`);
  res.redirect(`/stores/${store._id}/edit`);
}

exports.getStoreBySlug = async(req, res, next) => {
  // query database for specific store
  const store = await Store.findOne({ slug: req.params.slug });

  // if no store found, continue on to next middleware
  if (!store) {
    next();
    return;
  }

  res.render('store', { store, title: store.name })
}

exports.getStoresByTag = async (req, res) => {
  // get a list of all of the stores
  const tags = await Store.getTagsList(); // Use custom static method that lives on model
  const tag = req.params.tag;
  res.render('tag', { tags, title: 'Tags', tag });
}
