const mongoose = require('mongoose');
const Store = mongoose.model('Store'); // Referencing Store mongoose model that's being exported in ../models/Store.js
const User = mongoose.model('User'); // Referencing User mongoose model that's being exported in ../models/User.js
const multer = require('multer'); // Used for image uploads
const jimp = require('jimp'); // Used for image resizing
const uuid = require('uuid') // Provides unique identifiers for all images - prevents us from overwriting images accidentially

const multerOptions = {
  storage: multer.memoryStorage(), // States where we're going to store the images
  fileFilter(req, file, next) {
    const isPhoto = file.mimetype.startsWith('image/');
    if (isPhoto) {
      next(null, true);
    } else {
      next({message: 'That file type is not allowed.'}, false);
    }
  }
};

exports.homePage = (req, res) => {
  res.render('index');
}

exports.addStore = (req, res) => {
  res.render('editStore', {
    title: 'Add Store'
  });
}

// Apply multer with multerOptions to single form field named 'photo'
exports.upload = multer(multerOptions).single('photo'); // Stores file in memory - doesn't actually save the image

exports.resize = async(req, res, next) => {
  // check if there is no new file to resize
  if (!req.file) {
    next(); // skip to next middleware
    return;
  }
  const extension = req.file.mimetype.split('/')[1]; // get the image extension
  req.body.photo = `${uuid.v4()}.${extension}`; // Assign unique identifier to the photo

  // Now we resize
  const photo = await jimp.read(req.file.buffer) // can pass either filetype or buffer
  await photo.resize(800, jimp.AUTO); // resize photo
  await photo.write(`./public/uploads/${req.body.photo}`); // write photo to filesystem

  // Once we have written our photo to our filesystem, keep going
  next();

}

exports.createStore = async (req, res) => {
  req.body.author = req.user._id; // Takes id of logged in user and passes it to author field
  const store = await (new Store(req.body)).save(); // Immediately save store and await it. This will give us access to the autogenerated slug value for the redirect
  req.flash('success', `Successfully Created ${store.name}. Care to leave a review`); // makes use of flash middleware
  res.redirect(`/store/${store.slug}`);
}

exports.getStores = async(req, res) => {
  // variables for pagination
  const page = req.params.page || 1;
  const limit = 4;
  const skip = (page * limit) - limit;

  // 1. Query the database for a list of all stores
  const storesPromise = Store
    .find() // Returns promise
    .skip(skip)
    .limit(limit);

  const countPromise = Store.count(); // get number of documents in Store model

  const [stores, count] = await Promise.all([storesPromise, countPromise]); // fire off both storesPromise and countPromise queries at same time but wait for them both to come back

  const pages = Math.ceil(count / limit); // Math.ceil gives us upper bound

  res.render('stores', { title: 'Stores', stores, page, pages, count }); // pass the data to the template
}

// Confirm that the logged in user created the store
const confirmOwner = (store, user) => {
  // check if user and the store not are the same
  if(!store.author.equals(user._id)) {
    throw Error('You must own a store in order to edit it!');
  }
}

exports.editStore = async(req, res) => {
    // 1. Find the store given the id
  const store = await Store.findOne({ _id: req.params.id });

  // 2. Confirm they are the owner of the store
  confirmOwner(store, req.user); // if they are the owner, continue. If not, throw an error

  // 3. Render out the edit form so that the user can update their store
  res.render('editStore', { title: `Edit ${store.name}`, store})
}

exports.updateStore = async(req, res) => {
  // set the location data to be a point
  req.body.location.type = 'Point';

  // 1. Find and update the store
  const store = await Store.findOneAndUpdate({ _id: req.params.id }, req.body, {
    new: true, // return the new store instead of the old one
    runValidators: true // forces model to run required validators
  }).exec(); // exec forces the query to run

  // 2. Redirect them to the store and tell them it worked
  req.flash('success', `Sucessfully updated ${store.name}. <a href="/stores/${store.slug}">View Store</a>`);
  res.redirect(`/stores/${store._id}/edit`);
}

exports.getStoreBySlug = async(req, res, next) => {
  // query database for specific store
  const store = await Store.findOne({ slug: req.params.slug }).populate('author reviews'); // add .populate to find associated data for the author

  // if no store found, continue on to next middleware
  if (!store) {
    next();
    return;
  }

  res.render('store', { store, title: store.name })
}

exports.getStoresByTag = async (req, res) => {
  const tag = req.params.tag;
  const tagQuery = tag || { $exists: true} // if no tag, return any store that has a tag property on it
  // get a list of all of the stores
  const tagsPromise = Store.getTagsList(); // Use custom static method that lives on model
  const storesPromise = Store.find({ tags: tagQuery }); // Get all stores where tags property of store includes that specific tag

  // Await all Promises from returning and the result will be put in results variable
  const [tags, stores] = await Promise.all([tagsPromise, storesPromise]); // Returns an array of data

  res.render('tag', { tags, title: 'Tags', tag, stores });
}

exports.searchStores = async (req, res) => {
  const stores = await Store
  // first find stores that match
  .find({
    $text: { // able to use $text because we defined our index fields as text fields
      $search: req.query.q // search for all stores that match query on q param
    }
  }, {
    score: {$meta: 'textScore'} // project a score metadata field -- returns a score that signifies how well the document matched with the query term
  })
  // then sort them
  .sort({
    score: {$meta: 'textScore'} // sort meta value (score)
  })
  //limit to 5 stores
  .limit(5);
  res.json(stores);
}

exports.mapStores = async(req, res) => {
  const coordinates = [req.query.lng, req.query.lat].map(parseFloat); // .map(parseFloat) converts strings to numbers

  const q = {
    location: {
      $near: { // $near is a mongodb object that allows us to search for items near a lat and lng
        $geometry: {
          type: 'Point',
          coordinates
        },
        $maxDistance: 10000 // 10km
      }
    }
  };

  const stores = await Store.find(q).select('slug name description location photo').limit(10); // select lets you choose which fields to return; can do "-author" to choose which fields to hide
  res.json(stores);
}

exports.mapPage = (req, res) => {
  res.render('map', { title: 'Map' });
}

exports.heartStore = async (req, res) => {
  // get list of person's stores
  const hearts = req.user.hearts.map(obj => obj.toString()); // converts array of obj to array of strings
  const operator = hearts.includes(req.params.id) ? '$pull' : '$addToSet' // $pull is mongodb operator to remove; $addToSet makes sure added value is unique
  const user = await User
    .findByIdAndUpdate(req.user._id,
      { [operator]: { hearts: req.params.id }}, // will $pull or $addToSet depending on if heart is already in array or not
      { new: true } // returns updated user
  );
  res.json(user);
}

exports.getHearts = async (req, res) => {
  const stores = await Store.find({
    _id: { $in: req.user.hearts } // where _id property is in req.user.hearts array
  });

  res.render('stores', { title: 'Hearted Stores', stores });
};

exports.getTopStores = async (req, res) => {
  const stores = await Store.getTopStores(); // getTopStores() exists on the model
  res.render('topStores', { stores, title:'Top Stores!'});
}
